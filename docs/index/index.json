{"includedArchiveIdentifiers":["Doubles"],"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/fp\/init(_:)","title":"init(Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/fp\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/doubles\/fp\/int","title":"var int: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/fp\/abs(_:)","title":"static func abs(Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/fp\/ldexp(_:_:)","title":"static func ldexp(Self, Int) -> Self","type":"method"},{"path":"\/documentation\/doubles\/fp\/log10(_:)","title":"static func log10(Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/fp\/two_sum(_:_:_:)","title":"static func two_sum(Double, Double, inout Double) -> Double","type":"method"}],"path":"\/documentation\/doubles\/fp","title":"FP","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/common\/pow(_:_:)","title":"static func pow<T>(T, Int) -> T","type":"method"},{"path":"\/documentation\/doubles\/common\/string(_:_:width:fmt:showpos:uppercase:fill:)","title":"static func string<T>(T, Int, width: Int, fmt: Format, showpos: Bool, uppercase: Bool, fill: String) -> String","type":"method"},{"path":"\/documentation\/doubles\/common\/tofloat(_:)","title":"static func toFloat<T>(String) -> T?","type":"method"}],"path":"\/documentation\/doubles\/common","title":"Common","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/*(_:_:)-1am3s","title":"static func * (DDouble, Double) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/*(_:_:)-592fz","title":"static func * (Double, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/*(_:_:)-7el32","title":"static func * (DDouble, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/**(_:_:)","title":"static func ** (DDouble, Int) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/*=(_:_:)-6fptd","title":"static func *= (inout DDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/*=(_:_:)-7vomy","title":"static func *= (inout DDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+(_:_:)-6m9l7","title":"static func + (Double, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+(_:_:)-8c8tf","title":"static func + (DDouble, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+(_:_:)-90o83","title":"static func + (DDouble, Double) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+=(_:_:)-4mtnc","title":"static func += (inout DDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+=(_:_:)-5qgs4","title":"static func += (inout DDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/-(_:)-7yy3j","title":"static func - (DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/-(_:_:)","title":"static func - (DDouble, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/-=(_:_:)-96jwd","title":"static func -= (inout DDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/==(_:_:)-2mw3t","title":"static func == (DDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/==(_:_:)-9eke8","title":"static func == (Double, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-5b34o","title":"static func \/ (DDouble, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-5mlsd","title":"static func > (DDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-6sitf","title":"static func \/ (Double, DDouble) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-6x9ml","title":"static func \/ (DDouble, Double) -> DDouble","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-7kqai","title":"static func > (Double, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-9j4bw","title":"static func < (DDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-gne2","title":"static func < (Double, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-49zbs","title":"static func <= (DDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-56qui","title":"static func \/= (inout DDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-66z8k","title":"static func >= (DDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-usi5","title":"static func \/= (inout DDouble, DDouble)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init()","title":"init()","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(_:)-2eowr","title":"init(Double)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(_:)-2go3i","title":"init(Int)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(_:)-5fosn","title":"init(String)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(_:)-8z8w9","title":"init(SIMD2<Double>)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(_:_:)","title":"init(Double, Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/abs","title":"var abs: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/hi","title":"var hi: Double","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/int","title":"var int: Int","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isfinite","title":"var isFinite: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isinfinite","title":"var isInfinite: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isnan","title":"var isNaN: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isone","title":"var isOne: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/lo","title":"var lo: Double","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/x","title":"var x: SIMD2<Double>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/string(_:width:fmt:showpos:uppercase:fill:)","title":"func string(Int, width: Int, fmt: Format, showpos: Bool, uppercase: Bool, fill: String) -> String","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/log10","title":"static let Log10: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/log2","title":"static let Log2: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/digits","title":"static var digits: Int","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/e","title":"static let e: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/eps","title":"static let eps: Double","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/max","title":"static let max: DDouble","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/acos(_:)","title":"static func acos(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/acosh(_:)","title":"static func acosh(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/aint(_:)","title":"static func aint(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/asin(_:)","title":"static func asin(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/asinh(_:)","title":"static func asinh(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/atan(_:)","title":"static func atan(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/atan2(_:_:)","title":"static func atan2(DDouble, DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/atanh(_:)","title":"static func atanh(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/ceil(_:)","title":"static func ceil(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/cos(_:)","title":"static func cos(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/cosh(_:)","title":"static func cosh(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/ddrand()","title":"static func ddrand() -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/exp(_:)","title":"static func exp(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/floor(_:)","title":"static func floor(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/fmod(_:_:)","title":"static func fmod(DDouble, DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/inv(_:)","title":"static func inv(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/ldexp(_:_:)","title":"static func ldexp(DDouble, Int) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/log(_:)","title":"static func log(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/mul_pwr2(_:_:)","title":"static func mul_pwr2(DDouble, Double) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/nint(_:)","title":"static func nint(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/nroot(_:_:)","title":"static func nroot(DDouble, Int) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/polyeval(_:_:_:)","title":"static func polyeval([DDouble], Int, DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/polyroot(_:_:_:_:_:)","title":"static func polyroot([DDouble], Int, DDouble, Int, Double) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/pow(_:_:)","title":"static func pow(DDouble, DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sin(_:)","title":"static func sin(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sincos(_:)","title":"static func sincos(DDouble) -> (sina: DDouble, cosa: DDouble)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sinh(_:)","title":"static func sinh(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sinhcosh(_:)","title":"static func sinhcosh(DDouble) -> (sina: DDouble, cosa: DDouble)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sqr(_:)-1q6vy","title":"static func sqr(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sqr(_:)-pzdj","title":"static func sqr(Double) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sqrt(_:)-480eq","title":"static func sqrt(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/sqrt(_:)-7m98y","title":"static func sqrt(Double) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/tan(_:)","title":"static func tan(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/tanh(_:)","title":"static func tanh(DDouble) -> DDouble","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/+=(_:_:)-n8qr","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/-=(_:_:)-7ci0z","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/doubles\/ddouble\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/'...(_:)-2rk0","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/'...(_:)-64dmh","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-1pvhp","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-2ona7","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-575sb","title":"static func < (DDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-5ph5b","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-6dvtv","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_(_:_:)-jjtj","title":"static func > (DDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-2qn78","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-693sr","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-6k3zu","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-6zl6o","title":"static func <= (DDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-9ra98","title":"static func >= (DDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/_=(_:_:)-9uaj3","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/doubles\/ddouble\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/doubles\/ddouble\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/doubles\/ddouble\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/==(_:_:)-12axr","title":"static func == (DDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/==(_:_:)-29uoz","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/ddouble\/==(_:_:)-5vj7","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/doubles\/ddouble\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/doubles\/ddouble\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/abs(_:)","title":"static func abs(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/log10(_:)","title":"static func log10(DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/two_sum(_:_:_:)","title":"static func two_sum(Double, Double, inout Double) -> Double","type":"method"}],"path":"\/documentation\/doubles\/ddouble\/fp-implementations","title":"FP Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(_:)-35wxf","title":"init<Source>(Source)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(sign:exponent:significand:)","title":"init(sign: FloatingPointSign, exponent: Int, significand: DDouble)","type":"init"},{"path":"\/documentation\/doubles\/ddouble\/init(signof:magnitudeof:)","title":"init(signOf: DDouble, magnitudeOf: DDouble)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/iscanonical","title":"var isCanonical: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/isnormal","title":"var isNormal: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/issignalingnan","title":"var isSignalingNaN: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/issubnormal","title":"var isSubnormal: Bool","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/nextup","title":"var nextUp: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/sign","title":"var sign: FloatingPointSign","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/significand","title":"var significand: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/ulp","title":"var ulp: DDouble","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/addproduct(_:_:)","title":"func addProduct(DDouble, DDouble)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: DDouble)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: DDouble)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/isequal(to:)","title":"func isEqual(to: DDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/isless(than:)","title":"func isLess(than: DDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(DDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: DDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/round(_:)","title":"func round(FloatingPointRoundingRule)","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/infinity","title":"static var infinity: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/leastnormalmagnitude","title":"static var leastNormalMagnitude: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/nan","title":"static var nan: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/pi","title":"static var pi: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/radix","title":"static var radix: Int","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/signalingnan","title":"static var signalingNaN: DDouble","type":"property"},{"path":"\/documentation\/doubles\/ddouble\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/maximum(_:_:)","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/minimum(_:_:)","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/doubles\/ddouble\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/magnitude","title":"var magnitude: DDouble","type":"property"}],"path":"\/documentation\/doubles\/ddouble\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/-(_:)-9fx8b","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/doubles\/ddouble\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/ddouble\/advanced(by:)","title":"func advanced(by: DDouble) -> DDouble","type":"method"},{"path":"\/documentation\/doubles\/ddouble\/distance(to:)","title":"func distance(to: DDouble) -> DDouble","type":"method"}],"path":"\/documentation\/doubles\/ddouble\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/doubles\/ddouble","title":"DDouble","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/doubles\/format\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/doubles\/format\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/doubles\/format\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/doubles\/format\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/doubles\/format\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/format\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/doubles\/format\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/format\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/format\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/doubles\/format\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/doubles\/format\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/format\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/format\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/doubles\/format\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/doubles\/format\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/doubles\/format","title":"Format","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/*(_:_:)-2c1gd","title":"static func * (DDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/*(_:_:)-4l2yb","title":"static func * (Double, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/*(_:_:)-6iwl9","title":"static func * (QDouble, DDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/*(_:_:)-dehs","title":"static func * (QDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/**(_:_:)-1h9ks","title":"static func ** (QDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/**(_:_:)-8js8r","title":"static func ** (QDouble, Int) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/*=(_:_:)-2ko8v","title":"static func *= (inout QDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/*=(_:_:)-8ivp0","title":"static func *= (inout QDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+(_:_:)-3e3b1","title":"static func + (QDouble, DDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+(_:_:)-5asse","title":"static func + (QDouble, Double) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+(_:_:)-7g574","title":"static func + (Double, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+(_:_:)-9sfpk","title":"static func + (DDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+(_:_:)-q3a0","title":"static func + (QDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+=(_:_:)-1iu4o","title":"static func += (inout QDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+=(_:_:)-6vz00","title":"static func += (inout QDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:_:)-4uwke","title":"static func - (DDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:_:)-58qki","title":"static func - (Double, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:_:)-5apqc","title":"static func - (QDouble, Double) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:_:)-65nzd","title":"static func - (QDouble, DDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-=(_:_:)-8s6na","title":"static func -= (inout QDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-=(_:_:)-m0mh","title":"static func -= (inout QDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/==(_:_:)-17zlh","title":"static func == (QDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/==(_:_:)-72187","title":"static func == (QDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-191h0","title":"static func > (QDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-23t3t","title":"static func < (QDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-2nayg","title":"static func \/ (QDouble, Double) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-2obt8","title":"static func \/ (DDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-3jrz6","title":"static func < (QDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-3rmlx","title":"static func > (QDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-481ph","title":"static func > (Double, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-4a8mv","title":"static func < (Double, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-5een7","title":"static func \/ (QDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-5ge3b","title":"static func < (QDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-719mj","title":"static func > (QDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-86hlf","title":"static func \/ (QDouble, DDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-uorl","title":"static func \/ (Double, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-13k35","title":"static func \/= (inout QDouble, Double)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-16rfu","title":"static func >= (Double, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-2zwvz","title":"static func >= (DDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-3p8y6","title":"static func \/= (inout QDouble, DDouble)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-3ysrh","title":"static func <= (QDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-5wx9m","title":"static func <= (Double, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-6tjsj","title":"static func >= (QDouble, Double) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-7uvjn","title":"static func <= (DDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-879pg","title":"static func >= (QDouble, DDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-8vch2","title":"static func <= (QDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-9muso","title":"static func >= (QDouble, QDouble) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-9ojm2","title":"static func <= (QDouble, DDouble) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init()","title":"init()","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(_:)-39kb4","title":"init(DDouble)","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(_:)-6ozk0","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(_:)-8rtj9","title":"init(String)","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(_:)-9btn7","title":"init(Double...)","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(_:)-zea","title":"init(Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/abs","title":"var abs: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/ddouble","title":"var ddouble: DDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/int","title":"var int: Int","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isfinite","title":"var isFinite: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isinfinite","title":"var isInfinite: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isnan","title":"var isNaN: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isone","title":"var isOne: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/ispositive","title":"var isPositive: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/x","title":"var x: SIMD4<Double>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/acos()","title":"func acos() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/acosh()","title":"func acosh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/add(_:)-377lv","title":"func add(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/add(_:)-4znz6","title":"func add(Double) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/asin()","title":"func asin() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/asinh()","title":"func asinh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/atan()","title":"func atan() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/atanh()","title":"func atanh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/ceil()","title":"func ceil() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/cos()","title":"func cos() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/cosh()","title":"func cosh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/div(_:)-7uyse","title":"func div(Double) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/div(_:)-wfxj","title":"func div(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/exp()","title":"func exp() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/floor()","title":"func floor() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/fmod(_:)","title":"func fmod(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/inv()","title":"func inv() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/log()","title":"func log() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/log10()","title":"func log10() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/mul(_:)-2p1l0","title":"func mul(Double) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/mul(_:)-s7uf","title":"func mul(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/pow(_:)-2mwhr","title":"func pow(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/pow(_:)-56zle","title":"func pow(Int) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sin()","title":"func sin() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sincos()","title":"func sincos() -> (s: QDouble, c: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sincosh()","title":"func sincosh() -> (s: QDouble, c: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sinh()","title":"func sinh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sqr()","title":"func sqr() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sqrt()","title":"func sqrt() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/string()","title":"func string() -> String","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/string(_:width:fmt:showpos:uppercase:fill:)","title":"func string(Int, width: Int, fmt: Format, showpos: Bool, uppercase: Bool, fill: String) -> String","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sub(_:)-19wcv","title":"func sub(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sub(_:)-64svc","title":"func sub(Double) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/tan()","title":"func tan() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/tanh()","title":"func tanh() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/trunc()","title":"func trunc() -> QDouble","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/log10","title":"static let Log10: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/log2","title":"static let Log2: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/sloppy_add","title":"static let SLOPPY_ADD: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/sloppy_div","title":"static let SLOPPY_DIV: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/sloppy_mul","title":"static let SLOPPY_MUL: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/digits","title":"static let digits: Int","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/e","title":"static let e: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/eps","title":"static let eps: Double","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/inf","title":"static let inf: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/max","title":"static let max: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/nan","title":"static let nan: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/pi","title":"static let pi: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/pi2","title":"static let pi2: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/pi4","title":"static let pi4: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/twopi","title":"static let twopi: QDouble","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/acos(_:)","title":"static func acos(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/acosh(_:)","title":"static func acosh(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/asin(_:)","title":"static func asin(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/asinh(_:)","title":"static func asinh(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/atan(_:)","title":"static func atan(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/atan2(_:x:)","title":"static func atan2(QDouble, x: QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/atanh(_:)","title":"static func atanh(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/ceil(_:)","title":"static func ceil(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/cos(_:)","title":"static func cos(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/cosh(_:)","title":"static func cosh(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/divrem(_:b:)","title":"static func divrem(QDouble, b: QDouble) -> (d: QDouble, r: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/exp(_:)","title":"static func exp(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/floor(_:)","title":"static func floor(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/fmod(_:b:)","title":"static func fmod(QDouble, b: QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/inv(_:)","title":"static func inv(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/ldexp(_:_:)","title":"static func ldexp(QDouble, Int) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/log(_:)","title":"static func log(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/log10(_:)","title":"static func log10(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/max(_:)","title":"static func max(QDouble...) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/min(_:)","title":"static func min(QDouble...) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/nint(_:)","title":"static func nint(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/nroot(_:_:)","title":"static func nroot(QDouble, Int) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/polyeval(_:_:_:)","title":"static func polyeval([QDouble], Int, QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/polyroot(_:_:_:_:_:)","title":"static func polyroot([QDouble], Int, QDouble, Int, Double) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/pow(_:_:)","title":"static func pow(QDouble, QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/qdrand()","title":"static func qdrand() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/rand()","title":"static func rand() -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/rem(_:b:)","title":"static func rem(QDouble, b: QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/renorm(_:_:_:_:)","title":"static func renorm(inout Double, inout Double, inout Double, inout Double)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/renorm(_:_:_:_:_:)","title":"static func renorm(inout Double, inout Double, inout Double, inout Double, inout Double)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sin(_:)","title":"static func sin(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sincos(_:)","title":"static func sincos(QDouble) -> (s: QDouble, c: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sincosh(_:)","title":"static func sincosh(QDouble) -> (s: QDouble, c: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sinh(_:)","title":"static func sinh(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sqr(_:)","title":"static func sqr(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/sqrt(_:)","title":"static func sqrt(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/tan(_:)","title":"static func tan(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/tanh(_:)","title":"static func tanh(QDouble) -> QDouble","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+=(_:_:)-3075t","title":"static func += (inout QDouble, QDouble)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/+=(_:_:)-5b5o8","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:_:)-4i8ec","title":"static func - (QDouble, QDouble) -> QDouble","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-=(_:_:)-5xlui","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-=(_:_:)-6g0ct","title":"static func -= (inout QDouble, QDouble)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/doubles\/qdouble\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/'...(_:)-5ozh7","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/'...(_:)-6ugxq","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-2ehw0","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-3wq1e","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-4byi4","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_(_:_:)-9p3gn","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-2jawn","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-49cb8","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-6gg3e","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-7t4kk","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/doubles\/qdouble\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/doubles\/qdouble\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/doubles\/qdouble\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/==(_:_:)-26ejz","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/==(_:_:)-ymlv","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/doubles\/qdouble\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/doubles\/qdouble\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/abs(_:)","title":"static func abs(QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/two_sum(_:_:_:)","title":"static func two_sum(Double, Double, inout Double) -> Double","type":"method"}],"path":"\/documentation\/doubles\/qdouble\/fp-implementations","title":"FP Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/_=(_:_:)-6ywi5","title":"static func \/= (inout QDouble, QDouble)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(sign:exponent:significand:)","title":"init(sign: FloatingPointSign, exponent: Int, significand: QDouble)","type":"init"},{"path":"\/documentation\/doubles\/qdouble\/init(signof:magnitudeof:)","title":"init(signOf: QDouble, magnitudeOf: QDouble)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/exponent","title":"var exponent: Int","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/floatingpointclass","title":"var floatingPointClass: FloatingPointClassification","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/iscanonical","title":"var isCanonical: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/isnormal","title":"var isNormal: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/issignalingnan","title":"var isSignalingNaN: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/issubnormal","title":"var isSubnormal: Bool","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/nextdown","title":"var nextDown: Self","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/nextup","title":"var nextUp: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/sign","title":"var sign: FloatingPointSign","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/significand","title":"var significand: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/ulp","title":"var ulp: QDouble","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/addproduct(_:_:)","title":"func addProduct(QDouble, QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/addingproduct(_:_:)","title":"func addingProduct(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/formremainder(dividingby:)","title":"func formRemainder(dividingBy: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/formsquareroot()","title":"func formSquareRoot()","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/formtruncatingremainder(dividingby:)","title":"func formTruncatingRemainder(dividingBy: QDouble)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/isequal(to:)","title":"func isEqual(to: QDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/isless(than:)","title":"func isLess(than: QDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/islessthanorequalto(_:)","title":"func isLessThanOrEqualTo(QDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/istotallyordered(beloworequalto:)","title":"func isTotallyOrdered(belowOrEqualTo: QDouble) -> Bool","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/remainder(dividingby:)","title":"func remainder(dividingBy: Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/round()","title":"func round()","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/round(_:)","title":"func round(FloatingPointRoundingRule)","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/rounded()","title":"func rounded() -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/rounded(_:)","title":"func rounded(FloatingPointRoundingRule) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/squareroot()","title":"func squareRoot() -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/truncatingremainder(dividingby:)","title":"func truncatingRemainder(dividingBy: Self) -> Self","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/greatestfinitemagnitude","title":"static var greatestFiniteMagnitude: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/infinity","title":"static var infinity: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/leastnonzeromagnitude","title":"static var leastNonzeroMagnitude: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/leastnormalmagnitude","title":"static var leastNormalMagnitude: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/radix","title":"static var radix: Int","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/signalingnan","title":"static var signalingNaN: QDouble","type":"property"},{"path":"\/documentation\/doubles\/qdouble\/ulpofone","title":"static var ulpOfOne: Self","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/maximum(_:_:)","title":"static func maximum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/maximummagnitude(_:_:)","title":"static func maximumMagnitude(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/minimum(_:_:)","title":"static func minimum(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/minimummagnitude(_:_:)","title":"static func minimumMagnitude(Self, Self) -> Self","type":"method"}],"path":"\/documentation\/doubles\/qdouble\/floatingpoint-implementations","title":"FloatingPoint Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/doubles\/qdouble\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/*=(_:_:)-24ul","title":"static func *= (inout QDouble, QDouble)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/init(exactly:)","title":"init?<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/magnitude","title":"var magnitude: QDouble","type":"property"}],"path":"\/documentation\/doubles\/qdouble\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/-(_:)-3otz2","title":"static func - (Self) -> Self","type":"op"},{"path":"\/documentation\/doubles\/qdouble\/-(_:)-5u0d1","title":"static func - (QDouble) -> QDouble","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/doubles\/qdouble\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/qdouble\/advanced(by:)","title":"func advanced(by: QDouble) -> QDouble","type":"method"},{"path":"\/documentation\/doubles\/qdouble\/distance(to:)","title":"func distance(to: QDouble) -> QDouble","type":"method"}],"path":"\/documentation\/doubles\/qdouble\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/doubles\/qdouble","title":"QDouble","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/doubles\/+(_:_:)","title":"func + (Character, Int) -> Character","type":"op"},{"path":"\/documentation\/doubles\/+=(_:_:)","title":"func += (inout Character, Int)","type":"op"},{"path":"\/documentation\/doubles\/-(_:_:)","title":"func - (Character, Int) -> Character","type":"op"},{"path":"\/documentation\/doubles\/-=(_:_:)","title":"func -= (inout Character, Int)","type":"op"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/doubles\/swift\/character\/init(_:)","title":"init(Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/doubles\/swift\/character\/unicodescalar","title":"var unicodeScalar: UnicodeScalar","type":"property"},{"path":"\/documentation\/doubles\/swift\/character\/unicodevalue","title":"var unicodeValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/doubles\/swift\/character\/add(_:)","title":"func add(Int) -> Character","type":"method"}],"path":"\/documentation\/doubles\/swift\/character","title":"Character","type":"extension"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/doubles\/swift\/string\/subscript(_:)","title":"subscript(Int) -> Character","type":"subscript"}],"path":"\/documentation\/doubles\/swift\/string","title":"String","type":"extension"}],"path":"\/documentation\/doubles\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/doubles","title":"Doubles","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}